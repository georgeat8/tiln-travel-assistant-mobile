{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/george/Documents/fii-stuff/tiln/tiln-travel-assistant-mobile/App/screens/HomeScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport MapView from 'react-native-maps';\nimport * as Permissions from 'expo-permissions';\nimport * as Location from 'expo-location';\nimport { Audio } from 'expo-av';\n\nvar HomeScreen = function (_Component) {\n  _inherits(HomeScreen, _Component);\n\n  var _super = _createSuper(HomeScreen);\n\n  function HomeScreen(props) {\n    var _this;\n\n    _classCallCheck(this, HomeScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      latitude: null,\n      longitude: null,\n      isLogged: 'false'\n    };\n    return _this;\n  }\n\n  _createClass(HomeScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _await$Permissions$ge, status, response, location, userToken, isLogged, placeName;\n\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.LOCATION));\n\n            case 2:\n              _await$Permissions$ge = _context.sent;\n              status = _await$Permissions$ge.status;\n\n              if (!(status !== 'granted')) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.LOCATION));\n\n            case 7:\n              response = _context.sent;\n\n            case 8:\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n            case 10:\n              location = _context.sent;\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('userToken'));\n\n            case 13:\n              userToken = _context.sent;\n              _context.next = 16;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('loggedIn'));\n\n            case 16:\n              isLogged = _context.sent;\n              console.log(userToken);\n              _context.next = 20;\n              return _regeneratorRuntime.awrap(Location.reverseGeocodeAsync({\n                latitude: location.coords.latitude,\n                longitude: location.coords.longitude\n              }));\n\n            case 20:\n              placeName = _context.sent;\n              console.log(\"Current place name is: \" + placeName[0].name);\n              fetch('http://192.168.0.111:5000/api/set_location', {\n                method: 'post',\n                mode: 'no-cors',\n                headers: {\n                  'Content-type': 'application/json'\n                },\n                body: JSON.stringify({\n                  data: {\n                    lat: location.coords.latitude,\n                    lon: location.coords.longitude,\n                    place_name: placeName[0].name\n                  },\n                  token: userToken\n                })\n              }).then(function (resp) {\n                return resp.json();\n              }).then(function (data) {\n                try {\n                  console.log('Map data return: ');\n                  console.log(data);\n                } catch (err) {\n                  console.log(err);\n                }\n              });\n              this.setState({\n                latitude: location.coords.latitude,\n                longitude: location.coords.longitude,\n                isLogged: isLogged\n              });\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          latitude = _this$state.latitude,\n          longitude = _this$state.longitude,\n          isLogged = _this$state.isLogged;\n\n      if (latitude && isLogged === 'true') {\n        return React.createElement(MapView, {\n          style: {\n            flex: 1\n          },\n          initialRegion: {\n            latitude: latitude,\n            longitude: longitude,\n            latitudeDelta: 0.0922,\n            longitudeDelta: 0.0421\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 9\n          }\n        });\n      } else {\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 9\n          }\n        }, React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 11\n          }\n        }, \"Either there is no latitude found, or you haven't logged in yet\"));\n      }\n    }\n  }]);\n\n  return HomeScreen;\n}(Component);\n\nexport { HomeScreen as default };","map":{"version":3,"sources":["/home/george/Documents/fii-stuff/tiln/tiln-travel-assistant-mobile/App/screens/HomeScreen.js"],"names":["React","Component","MapView","Permissions","Location","Audio","HomeScreen","props","state","latitude","longitude","isLogged","getAsync","LOCATION","status","askAsync","response","getCurrentPositionAsync","location","AsyncStorage","getItem","userToken","console","log","reverseGeocodeAsync","coords","placeName","name","fetch","method","mode","headers","body","JSON","stringify","data","lat","lon","place_name","token","then","resp","json","err","setState","flex","latitudeDelta","longitudeDelta"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAEA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;AACA,OAAO,KAAKC,QAAZ,MAA0B,eAA1B;AACA,SAASC,KAAT,QAAsB,SAAtB;;IAEqBC,U;;;;;AACnB,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,IADC;AAEXC,MAAAA,SAAS,EAAE,IAFA;AAGXC,MAAAA,QAAQ,EAAE;AAHC,KAAb;AAHiB;AAQlB;;;;;;;;;;;;+CAG0BR,WAAW,CAACS,QAAZ,CAAqBT,WAAW,CAACU,QAAjC,C;;;;AAAjBC,cAAAA,M,yBAAAA,M;;oBAEJA,MAAM,KAAK,S;;;;;;+CACUX,WAAW,CAACY,QAAZ,CAAqBZ,WAAW,CAACU,QAAjC,C;;;AAAjBG,cAAAA,Q;;;;+CAGaZ,QAAQ,CAACa,uBAAT,CAAiC,EAAjC,C;;;AAAjBC,cAAAA,Q;;+CACkBC,YAAY,CAACC,OAAb,CAAqB,WAArB,C;;;AAAlBC,cAAAA,S;;+CACiBF,YAAY,CAACC,OAAb,CAAqB,UAArB,C;;;AAAjBT,cAAAA,Q;AAEJW,cAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;;+CAEsBjB,QAAQ,CAACoB,mBAAT,CAA6B;AACjDf,gBAAAA,QAAQ,EAAES,QAAQ,CAACO,MAAT,CAAgBhB,QADuB;AAEjDC,gBAAAA,SAAS,EAAEQ,QAAQ,CAACO,MAAT,CAAgBf;AAFsB,eAA7B,C;;;AAAlBgB,cAAAA,S;AAKJJ,cAAAA,OAAO,CAACC,GAAR,6BAAsCG,SAAS,CAAC,CAAD,CAAT,CAAaC,IAAnD;AAEAC,cAAAA,KAAK,CAAC,4CAAD,EAA+C;AAClDC,gBAAAA,MAAM,EAAE,MAD0C;AAElDC,gBAAAA,IAAI,EAAE,SAF4C;AAGlDC,gBAAAA,OAAO,EAAE;AACP,kCAAgB;AADT,iBAHyC;AAMlDC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,GAAG,EAAElB,QAAQ,CAACO,MAAT,CAAgBhB,QADjB;AAEJ4B,oBAAAA,GAAG,EAAEnB,QAAQ,CAACO,MAAT,CAAgBf,SAFjB;AAGJ4B,oBAAAA,UAAU,EAAEZ,SAAS,CAAC,CAAD,CAAT,CAAaC;AAHrB,mBADa;AAMnBY,kBAAAA,KAAK,EAAElB;AANY,iBAAf;AAN4C,eAA/C,CAAL,CAeGmB,IAfH,CAeQ,UAACC,IAAD;AAAA,uBAAUA,IAAI,CAACC,IAAL,EAAV;AAAA,eAfR,EAgBGF,IAhBH,CAgBQ,UAACL,IAAD,EAAU;AACd,oBAAI;AACFb,kBAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,kBAAAA,OAAO,CAACC,GAAR,CAAYY,IAAZ;AACD,iBAHD,CAGE,OAAOQ,GAAP,EAAY;AACZrB,kBAAAA,OAAO,CAACC,GAAR,CAAYoB,GAAZ;AACD;AACF,eAvBH;AAwBA,mBAAKC,QAAL,CAAc;AACZnC,gBAAAA,QAAQ,EAAES,QAAQ,CAACO,MAAT,CAAgBhB,QADd;AAEZC,gBAAAA,SAAS,EAAEQ,QAAQ,CAACO,MAAT,CAAgBf,SAFf;AAGZC,gBAAAA,QAAQ,EAARA;AAHY,eAAd;;;;;;;;;;;6BAOO;AAAA,wBACmC,KAAKH,KADxC;AAAA,UACCC,QADD,eACCA,QADD;AAAA,UACWC,SADX,eACWA,SADX;AAAA,UACsBC,QADtB,eACsBA,QADtB;;AAGP,UAAIF,QAAQ,IAAIE,QAAQ,KAAK,MAA7B,EAAqC;AACnC,eACE,oBAAC,OAAD;AACE,UAAA,KAAK,EAAE;AAAEkC,YAAAA,IAAI,EAAE;AAAR,WADT;AAEE,UAAA,aAAa,EAAE;AACbpC,YAAAA,QAAQ,EAARA,QADa;AAEbC,YAAAA,SAAS,EAATA,SAFa;AAGboC,YAAAA,aAAa,EAAE,MAHF;AAIbC,YAAAA,cAAc,EAAE;AAJH,WAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,OAZD,MAYO;AACL,eACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6EADF,CADF;AAOD;AACF;;;;EAtFqC9C,S;;SAAnBK,U","sourcesContent":["import React, { Component } from 'react';\nimport { Text, View, AsyncStorage } from 'react-native';\nimport MapView from 'react-native-maps';\nimport * as Permissions from 'expo-permissions';\nimport * as Location from 'expo-location';\nimport { Audio } from 'expo-av';\n\nexport default class HomeScreen extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      latitude: null,\n      longitude: null,\n      isLogged: 'false',\n    };\n  }\n\n  async componentDidMount() {\n    const { status } = await Permissions.getAsync(Permissions.LOCATION);\n\n    if (status !== 'granted') {\n      const response = await Permissions.askAsync(Permissions.LOCATION);\n    }\n\n    let location = await Location.getCurrentPositionAsync({});\n    let userToken = await AsyncStorage.getItem('userToken');\n    let isLogged = await AsyncStorage.getItem('loggedIn');\n\n    console.log(userToken);\n\n    let placeName = await Location.reverseGeocodeAsync({\n      latitude: location.coords.latitude,\n      longitude: location.coords.longitude,\n    });\n\n    console.log(`Current place name is: ${placeName[0].name}`);\n\n    fetch('http://192.168.0.111:5000/api/set_location', {\n      method: 'post',\n      mode: 'no-cors',\n      headers: {\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify({\n        data: {\n          lat: location.coords.latitude,\n          lon: location.coords.longitude,\n          place_name: placeName[0].name,\n        },\n        token: userToken,\n      }),\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        try {\n          console.log('Map data return: ');\n          console.log(data);\n        } catch (err) {\n          console.log(err);\n        }\n      });\n    this.setState({\n      latitude: location.coords.latitude,\n      longitude: location.coords.longitude,\n      isLogged,\n    });\n  }\n\n  render() {\n    const { latitude, longitude, isLogged } = this.state;\n\n    if (latitude && isLogged === 'true') {\n      return (\n        <MapView\n          style={{ flex: 1 }}\n          initialRegion={{\n            latitude,\n            longitude,\n            latitudeDelta: 0.0922,\n            longitudeDelta: 0.0421,\n          }}\n        />\n      );\n    } else {\n      return (\n        <View>\n          <Text>\n            Either there is no latitude found, or you haven't logged in yet\n          </Text>\n        </View>\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}